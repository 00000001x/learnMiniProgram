<!--pages/wxml/wxml.wxml-->
<!--1.wxml的格式-->
<view>111</view>
<input placeholder="请输入内容"/>
<!--2.Musatche语法-->
<view>{{message}}</view>
<view>{{firstName}} {{secondName}}</view>
<view>{{firstName +' '+secondName}}</view>
<view>{{age >= 18 ? '成年人':'未成年人'}}</view>

<view>{{nowTime}}</view>

<button size="mini" bindtap="changeColor">切换颜色</button>
<view class="box11 {{isActive?'active':''}}"></view>

<!--3.条件逻辑判断-->
<!--3.1 wx:if-->
<view>--------条件逻辑判断-------</view>
<button size="mini" bindtap="handleShow">切换显示</button>
<view wx:if="{{isShow}}">哈哈哈</view>
<!--3.2 wx:elif/wx:else/-->
<view wx:if="{{score>=90}}">优秀</view>
<view wx:elif="{{score>=85}}">良好</view>
<view wx:elif="{{score>=60}}">及格</view>
<view wx:else>不及格</view>

<!--hidden属性-->
<view hidden="{{false}}">我是hidden属性控制的内容1</view>

<!--hidden和wx:if在隐藏组件时的区别-->
<!--
  区别：
    hidden:将组件隐藏时，组件依然存在
    wx:if：将组件隐藏时，组件不存在
  选择：
    如果显示和隐藏切换频率高，选择 hidden
    如果显示和隐藏切换频率低，选择 wx:if
-->
<view hidden="{{true}}">我是hidden隐藏的内容</view>
<view wx:if="{{false}}">我是wx:if隐藏的内容</view>

<view>------列表渲染------</view>
<!--1.wx:for回顾-->
<!--1.1 遍历数组、字符串、数字-->
<view wx:for="{{3}}" wx:key="un">{{item}}</view>
<view wx:for="abc" wx:key="un">{{item}}</view>
<view wx:for="{{['小明','小红']}}" wx:key="un">{{item}}{{index}}</view>
<!--2.block标签:不是一个组件，仅仅是包装元素，不会在页面做任何渲染，只接受控制属性
    好处：1.将需要进行遍历或判断的内容进行包裹
          2.提高带啊的可读性
-->
<view wx:if="{{isShow}}">
  <view>1111</view>
  <button>222</button>
  <text>3333</text>
</view>
<block wx:if="{{isShow}}">
 <view>1111</view>
  <button>222</button>
  <text>3333</text>
</block>
<block wx:for="{{2}}" wx:key="un">
 <view>11</view>
  <button>22</button>
  <text>33</text>
</block>

<!--3.item、index起名字,在多层遍历时一般需要起名字-->
<view wx:for="{{movies}}">{{item}}{{index}}</view>
<view wx:for="{{movies}}" wx:for-item="movie" wx:for-index="i">{{movie}}{{i}}</view>

<block wx:for="{{nums}}" wx:for-item="inner_nums">
  <block wx:for="{{inner_nums}}">
    <view>{{item}}</view>
  </block>
</block>

<!--4:wx:key的作用：提高wx:for的性能-->
<view wx:for="{{letters}}" wx:key="un">{{item}}</view>

<!--5.template:模板-->
<!--
  之前的小程序不支持自定义组件，为了进行代码的复用用:template
  注意：1.模板中包裹的内容在没有使用前是不会进行渲染的
        2.可以通过import导入模板
        3.include不可以导入模板
  总结：关于wxml的两种方式：
        import导入：1.主要导入template 2.特点：不能进行递归导入
        include导入:1.将公共的wxml中的组件抽取到一个文件中 2.特点：不能导入template/wxs,可以进行递归导入
-->
<view>-----------template-------------</view>
<template name="contentItem">
<button>按钮</button>
<view>lalala</view>
<button>{{btnContent1}}</button>
<view>{{content}}</view>
</template>

<template is="contentItem" data="{{btnContent1:'测试1',content:'yes'}}"/>
<template is="contentItem" data="{{btnContent1:'测试2',content:'no'}}"/>

<import src="/pages/template.wxml"/>
<template is="importtest" data="{{btnContent1:'测试绝对路径导入',content:'我是通过import引进来的'}}"/>
<import src="../template.wxml"/>
<template is="importtest" data="{{btnContent1:'测试相对路径导入',content:'我是通过import引进来的'}}"/>
